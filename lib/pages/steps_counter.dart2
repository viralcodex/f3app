import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:sensors_plus/sensors_plus.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';

class StepCounter extends StatefulWidget {
  const StepCounter({Key? key}) : super(key: key);

  @override
  _StepCounterState createState() => _StepCounterState();
}

class _StepCounterState extends State<StepCounter> {
  double x = 0.0;
  double y = 0.0;
  double z = 0.0;

  double xavg = 0.0;
  double yavg = 0.0;
  double zavg = 0.0;

  double xsum = 0;
  double ysum = 0;
  double zsum = 0;

  double miles = 0.0;
  double duration = 0.0;
  double calories = 0.0;
  double addValue = 0.025;

  double exactDistance = 0.0;
  double previousDistance = 0.0;
  int steps = 0;
  int flag = 0;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: StreamBuilder<AccelerometerEvent>(
      stream: SensorsPlatform.instance.accelerometerEvents,
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          x = snapshot.data!.x;
          y = snapshot.data!.y;
          z = snapshot.data!.z;
          xavg = xAvg(x);
          yavg = yAvg(y);
          zavg = zAvg(z);
          exactDistance = getValue(x, y, z, xavg, yavg, zavg);
          print(exactDistance);

          if (exactDistance > 6 && flag == 0) {
            steps++;
            flag = 1;
          } else if (exactDistance > 6 && flag == 1) {}

          if (exactDistance < 6 && flag == 1) {
            flag = 0;
          }

          if (steps < 0) steps = 0;

          calories = calculateCalories(steps);
          duration = calculateDuration(steps);
          miles = calculateMiles(steps);
        }
        return Center(
          child: Text(
            "Steps You Have " + steps.toString(),
            style: TextStyle(
              fontSize: 30,
              color: Colors.cyan,
            ),
          ),
        );
      },
    ));
  }

  final FirebaseAuth auth = FirebaseAuth.instance;

  Future<void> inputData() async {
    // here you write the codes to input the data into firestore
  }

  // double calculateMagnitude(double x, double y, double z) {
  //   double distance = sqrt(x * x + y * y + z * z);
  //   getPreviousValue();
  //   double mode = distance - previousDistance;
  //   setPreviousValue(distance);
  //   return mode;
  // }

//   void setprefData(double predistance) async {
//     final User user = await auth.currentUser!;
//     final uid = user.uid;
//     final steps = FirebaseFirestore.instance.collection('steps').doc(uid);
//     //_pref.setDouble("previousDistance", predistance);
//     final stepjson = {
//       'calories':0,
//       'miles':0,
//     };
//   }

//   void getPreviousValue() async {
//     SharedPreferences _pref = await SharedPreferences.getInstance();
//     setState(() {
//       previousDistance = _pref.getDouble("previousDistance") ?? 0;
//     });
//   }
// }
  double xAvg(double xav) {
    xsum += xav;
    return xsum;
  }

  double yAvg(double yav) {
    ysum += yav;
    return ysum;
  }

  double zAvg(double zav) {
    zsum += zav;
    return zsum;
  }

  double getValue(
      double x, double y, double z, double xav, double yav, double zav) {
    double magnitude = sqrt(
        (x - xav) * (x - xav) + (z - zav) * (z - zav) + (y - yav) * (y - yav));
    getPreviousValue();
    double modDistance = magnitude - previousDistance;
    setPreviousValue(magnitude, modDistance);
    return modDistance;
  }

  void setPreviousValue(double distance, double currdist) async {
    final User user = auth.currentUser!;
    final uid = user.uid;
    //_pref.setDouble("preValue", distance);
    final docUser = FirebaseFirestore.instance.collection('steps').doc(uid);
    await docUser.update({'currsteps': currdist, 'prevsteps': distance});
  }

  void getPreviousValue() async {
    final User user = auth.currentUser!;
    final uid = user.uid;
    final stepsref = FirebaseFirestore.instance.collection('steps');
    var prevref = await stepsref.doc(uid).get();
    if (prevref.exists) {
      Map<String, dynamic>? data = prevref.data();
      previousDistance = data?['prevsteps'];
    }
    //SharedPreferences _pref = await SharedPreferences.getInstance();

    //previousDistacne = _pref.getDouble("preValue") ?? 0.0;
  }

  // void calculate data
  double calculateMiles(int steps) {
    double milesValue = (2.2 * steps) / 5280;
    return milesValue;
  }

  double calculateDuration(int steps) {
    double durationValue = (steps * 1 / 1000);
    return durationValue;
  }

  double calculateCalories(int steps) {
    double caloriesValue = (steps * 0.0566);
    return caloriesValue;
  }
}
